<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AABAREQCQEREA0BERANAREQDQEREA0BERANAREQDPUNHA///AABqSisGe04iLX5PIXB/TyCwgFAg3IBQ
        IPSAUCD+gFAg/oBQIPSAUCDcf08gsH5PIXB7TiItZ0otBgAnpAA5Q0kDQEREA0BERANAREQDQEREA0BE
        RANAREQDQEREA0BERANAREQEQEREBEBERARAREQEQEREBCU9WgJjSDEGe04iPH9PIZuAUCHhgFAg/IBQ
        IP+AUCH/gFAh/4BQIf+AUCH/gFAh/4BQIf+AUCD/gFAg/IBQIeF/TyGbe04iPGJIMQUnPlgCQEREBEBE
        RARAREQEQEREBEBERARAREQDQEREA0BERARAREQEQEREBD5ERQQALocBeE4kHn5PIY6AUCHsgFAg/4BQ
        IP+AUCH/gFAg/4BQIP+AUCH/gFAh/4BQIf+AUCD/gFAg/4BQIf+AUCH/gFAg/4BQIP+AUCHsfk8hjXhN
        JB4AMX8BP0RFBEBERARAREQEQEREBEBERANAREQDQEREBEBERAQ+REUEEThjAXxOIjp/TyHFgFAh/oBQ
        H/+AUB3/gFAf/4BQIf+AUCH/gFAg/4BQIP+AUCH/gFAh/4BQIf+AUCH/gFAg/4BQHv+AUB7/gFAg/4BQ
        If+AUCD+f08hxXxOIjoROGQBPkRGBEBERARAREQEQEREA0BERANAREQEP0RFBAA0bgF8TyJGgFAh24BQ
        If+AUCD/fVA1/3pSWv9+UDT/gFAg/4BQIf+AUCH/gFAg/4BQIP+AUCH/gFAh/4BQIP9/UCf/e1FT/3xR
        R/+AUCH/gFAg/4BQIf+AUCD/gFAh231PIkYENmkBP0RFBEBERARAREQDQEREA0BERAQANZoBflAiOoBQ
        Idt/Th7/gE8f/35PK/+KcbD/tqrn/4lurf9/Tyr/gVAg/4FQIf+BUCH/gVAh/4FQIf+BUCH/gFAe/35a
        d/+toOL/nYzV/3xSTf+BUB7/gVAh/4FQIf+BUCH/gFAh235QIjoANZsBQEREBEBERANAREQDJUllAlw+
        IR1tRR/EcUcf/45qSP+BWzX/bEQw/5eGz//r6PP/lILL/21FL/9wRhz/cEYe/3BGHv9wRh7/cEYe/3BG
        Hv9vRRz/eF2T/9vX8v+/tev/bkxh/3BGGv9wRx7/cUcf/3FHH/9xRx//bUUfxFw+IR0mSWQCQEREAzxF
        SQJKQTYFWzsdi1s7HP9cOx3/sKGU/7Cgk/9pSzH/fmiB/9HK5P98ZX3/aUwx/2pMMf9qTDH/akwx/2pM
        Mf9qTDH/akwx/2pML/9sUFP/v7XT/6GRsv9pTD7/akww/2JDJv9bOxz/Wzsc/1s7HP9cOxz/WzsdiklB
        NgU9RUkDwxkAAFo7HjpbOx3qXDsc/1o5Gv9+ZU3/zsW+/8/Fv//SycH/6eXi/9HIwP/OxL3/zsS+/87E
        vv/OxL7/zsS+/87Evv/OxL7/zsS+/83EvP/j3tr/29TO/83DvP/SycT/opCA/1s7HP9bOxz/Wzsd/1w7
        HP9bOx3pWjseOv8BAABOQDEFWzsdmVw7HP9bOx3/Wzsc/1w7Hf9xVTv/gWhS/4JpUv+FbVf/gmlS/4Fo
        Uf+BaFL/gWhS/4FoUf+BaFH/gWhS/4FoUv+BaFL/gWhR/4RsVv+DalT/hW1X/87Evv+hjn7/Wjka/1s7
        HP9bOx3/Wzsd/1w7HP9bOx2YTEAyBVo7HixbOx3fXDsc/1s7Hf9cOx3/Wzsc/1o6G/9ZORr/WTgZ/1k4
        GP9ZORn/WTkZ/1k5Gf9ZORn/WTkZ/1k5Gf9ZORn/WTkZ/1k5Gf9ZORr/WTgZ/1g3GP9sTzT/z8a//4Fo
        Uf9ZORr/XDsd/1s7Hf9bOx3/XDsc/1s7Hd9aOx4rWzsdbVs7HftcOxz/Wzsd/1s7Hf9bOx3/XDsc/1s7
        HP9gQSP/not6/7Smmv+zpJj/s6SY/7OkmP+zpJj/s6SY/7OkmP+zpJj/s6SY/7OkmP+zpJj/s6SX/8C0
        qv/OxL3/aUww/1s6G/9cOxz/XDsc/1s7Hf9cOx3/Wzsd+1s7HW1bOx2tXDsc/1w7HP9cOx3/Wzob/1k5
        Gv9aORr/WTgZ/109H/+Uf2z/qJaI/6eVhv+nlYb/p5WG/6eVhv+nlYb/p5WG/6eVhv+nlYb/p5WG/6eV
        hv+mlIX/wbSr/8W6sf9hQiX/Wzsc/1s7Hf9cOxz/XDsc/1s7Hf9cOxz/WzsdrVw7HNlcOx3/Wzsd/1s6
        G/9sTzP/nIl4/6KPgP+ij3//oI18/5+MfP+gjX3/oI19/5+Le/+fjHz/oI19/6CNfP+ei3r/oI19/6CN
        ff+fjHz/not7/5+Me/+8r6T/x7y0/2JDJv9bOxz/Wzsd/1s7Hf9cOxz/XDsc/1w7Hf9cOxzZXDsc8lw7
        Hf9cOx3/WTkZ/5aBb//a0s7/vrGn/7+zqf/e19T/z8W//72wpv+/sqj/3NXS/9HHwf+8r6X/x7yz/+Hb
        2P/EuK//va+l/8zCu//f2db/wLOq/8zCu//Jv7f/ZEUo/1s7HP9bOx3/Wzsd/1s7Hf9cOxz/XDsd/1w7
        HPJcOxz9XDsd/1s7HP9cOx3/s6SX/6ubjf9aOhv/akwx/83DvP+IcVv/Wzsc/2VHKv/IvbX/kXxo/1o5
        Gv95X0b/0cfB/3NYPv9aOhv/hm5Y/83Evf9oSy//inNe/8rAuP9lRyr/Wzoc/1w7HP9bOx3/Wzsd/1s7
        Hf9bOx3/XDsc/Vw7HP1cOx3/Wzsc/2RFKP/Jv7f/rJyO/3dcQ/+Kc1//08rE/3pfR/9ePiD/b1I3/8/G
        v/99Y0v/VjQU/3JWPP/Qx8D/c1c9/1c1Ff96YEf/0MbA/2xPNP+EbFb/zMK6/2dJLf9bOhv/XDsc/1w7
        HP9bOx3/Wzsd/1s7Hf9cOxz8XDsc8lw7Hf9aORr/c1g+/9jQy//Uy8b/0snD/9nSzv/i3Nn/zcO8/8O3
        rv/Dt67/3dfT/7Cgk/+YhHL/not6/9fPyv+PeWX/b1M5/4BnUP/SycP/eF1E/4NqVP/Nw7z/aUsv/1s6
        G/9bOx3/XDsc/1w7HP9bOx3/Wzsd/1w7HPFcOxzZXDsd/1k4Gf+LdGD/zMK7/3RZP/9yVjz/u62i/8C0
        qv+PeWX/moZ0/76xp//a08//vbCl/8S4r//OxL3/4tza/9fPyv/SycP/08vF/+Lc2f/Kv7f/yL62/9HI
        wv9qTTH/Wzob/1s7Hf9bOx3/XDsc/1w7HP9cOx3/XDsc2Vs7HK1bOxz/Wjob/6eVhv+2qJ3/WTka/109
        H//Btaz/l4Jw/1Y0FP9XNRb/nop6/72vpf9gQCL/X0Ai/3NYPv/RyML/kXto/3leRf+Kc17/08rE/7ao
        nP+yo5f/0snE/2xPNP9aOhv/Wzsd/1s7Hf9bOx3/XDsc/1w7HP9bOx2sWzsdbVs7HPtfPyH/wLOq/8vB
        uv+ciHf/mYVz/9bOyf+WgW7/bE80/2ZIK/+0pZn/q5qM/1k5Gf9YNxj/Zkgs/83DvP+AZ1D/VjQV/14+
        IP/DuK//kXto/3dcQ//PxsD/b1I3/1o6G/9cOxz/Wzsd/1s7Hf9cOxz/Wzsd+1s7HW1aOx4sWzsc314+
        H/+Ufmv/tqid/8K2rf/Lwbr/1MzG/9TLxv/RyML/zMK7/97X1P/OxL7/rJuN/56Lev+ZhXP/1c3I/5iE
        cv9tUDX/aUsv/7+yqP+ei3r/dVpB/9DHwP9xVTv/Wjob/1w7HP9cOxz/Wzsd/1w7HP9bOx3fWjweK01A
        MgVbOx2YWzsc/1o6G/9cPB3/YEAi/2VHKv9sTzT/dVpB/4FoUf+Nd2L/mYVz/6eWh/+1p5v/wbSr/8rA
        uP/TysX/1MzH/9LJw//Nw7z/3dfT/9DGwP+6raL/1s7J/3NXPf9aORr/Wzsd/1w7HP9cOxz/XDsc/1s7
        HZhNQDIFwhoAAFo7HjpbOx3qWzsc/1s7HP9bOxz/Wzoc/1o6G/9aORr/WTka/1k4Gf9ZOBn/Wjka/1w8
        Hf9fQCL/ZEYp/2tOMv90WT//f2ZO/4t1YP+Xg3H/pZOE/7uto//Y0Mv/dVpB/1o5Gv9bOx3/Wzsd/1w7
        HP9bOx3pWjweOf8AAAA8RUkCSkA1BVs7HYtbOxz/XDsc/1w7HP9bOx3/Wzsd/1s7Hf9cOxz/XDsc/1w7
        Hf9bOxz/Wzsc/1s7HP9bOhz/Wzob/1o5Gv9ZORr/WTgZ/1k4Gf9ZOBj/cFQ6/9DHwP93XEP/Wjka/1w7
        HP9cOx3/Wzsc/1s7HYpKQTYFPUVJA0BERAMqS2QCWTwgHFs7HcJcOxz/XDsc/1w7HP9bOx3/Wzsd/1s7
        Hf9cOxz/XDsc/1s7Hf9bOx3/Wzsd/1w7HP9cOxz/Wzsd/1s7Hf9bOx3/XDsc/1o6G/9uUTb/08rF/495
        Zf9cPCD/Wzsa/1s7HP9bOx3CWTwgHCpLZAJAREQDQEREA0BERAQAW6QBWjseOFs7HdlcOxz/XDsc/1w7
        HP9bOx3/Wzsd/1s7Hf9cOxz/XDsc/1s7Hf9bOx3/Wzsd/1w7HP9cOxz/Wzsd/1s7Hf9bOx3/Wzsc/2BA
        I/+lk4L/uq/P/2xVuP9fQ17/XDwh2Fk6EzYAW6QBQEREBEBERANAREQDQEREBD9ERQQiT3IBWjseRFs7
        HdlcOxz/XDsd/1w7HP9bOx3/Wzsd/1s7Hf9cOxz/XDsc/1s7Hf9bOx3/Wzsd/1w7HP9cOxz/Wzsd/1s7
        Hf9cOx3/Wzsc/18/H/9wWJb/a1f7/2pV7/9nUtS+Z1bxLT5DPgQ/REEEQEREA0BERANAREQEQEREBD9E
        RgQoTWoBWjseOFs7HcNbOxz+XDsc/1w7HP9bOx3/Wzsd/1s7Hf9cOxz/XDsc/1s7Hf9bOx3/Wzsd/1w7
        HP9cOxz/Wzsd/1s7Hf9cOx3/Wzsc/1w8KP1jSYzNalf91mpX/v9qV/unV06pCDxCMQRAREQDQEREA0BE
        RARAREQEQEREBD9ERQQYU4QBWDwgHFs7HYtbOx3rXDsc/1w7HP9cOx3/Wzsd/1s7Hf9cOxz/XDsc/1s7
        Hf9bOx3/Wzsd/1w7HP9cOxz/XDsc/1w7HP9bOx3qWzsbi1c5EB1nVvAlalb5hWlW9UkcNAACQERDBEBE
        RANAREQDQEREBEBERARAREQEQEREBEBERAQzSlkCT0AwBVo8HzpbOx2YWzsd4Fs7HftcOxz/XDsd/1w7
        Hf9cOx3/XDsd/1w7Hf9cOx3/XDsc/1s7HftbOx3gWzsdmVo8HzpPQDAFMUlTAi46HQJDQ2oCPkJMAz9E
        QgRAREQEQEREA0BERAJAREQDQEREA0BERANAREQDQEREA0BERAM9RUkCGlN/AVE+KwVaPB4sWzsdbVs7
        Ha1cOxzZXDsc8lw7HP1cOxz9XDsc8lw7HNlbOx2tWzsdbVo7HitUPSYFB1mcAD5FRwNAREQDQEREAz9E
        QAM/REIDQEREA0BERANAREQCAIABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQA=
</value>
  </data>
</root>